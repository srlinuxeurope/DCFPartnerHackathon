# Copyright 2023 Nokia
# Licensed under the BSD 3-Clause License.
# SPDX-License-Identifier: BSD-3-Clause

---
#
# Sample Ansible playbook to configure BGP peering based on PeeringDB and IRR database queries
# Uses bgpq4 tool to generate prefix lists
#
# Before using: ansible-galaxy collection install nokia.srlinux
#

- name: Configure SR Linux BGP peering
  hosts: srlinux
  gather_facts: False
  tasks:
    - name: Lookup env variables
      set_fact:
        IXP_SITE: "{{ lookup('ansible.builtin.env', 'IXP') or 'AMS-IX' }}"
        AS1: "{{ lookup('ansible.builtin.env', 'AS1') or 50266 }}"
        AS2: "{{ lookup('ansible.builtin.env', 'AS2') or 24875 }}"
    - debug: msg="IXP_SITE={{IXP_SITE}} AS1={{AS1}} AS2={{AS2}}"

    - block: # Requests are throttled if too frequent
        - name: Retrieve node IP addresses at given IXP site '{{ IXP_SITE }}' (can be slow...)
          ansible.builtin.uri:
            url: https://peeringdb.com/api/netixlan?asn={{ AS2 }}&name__contains={{ IXP_SITE | urlencode }}
            return_content: true
          register: node_ips
        - debug: var=node_ips
        - name: For each peer, retrieve peering IP addresses at given IXP site '{{ IXP_SITE }}'
          ansible.builtin.uri:
            url: https://peeringdb.com/api/netixlan?asn={{ item[0].as|default(AS1) }}&name__contains={{ IXP_SITE | urlencode }}
            return_content: true
          register: peer_ips
          loop: "{{ bgp.neighbors }}"
        - name: Retrieve list of IP prefixes exported by each peer AS
          ansible.builtin.shell:
            cmd: docker run -i --rm ghcr.io/bgp/bgpq4:latest -{{ item[1] }} -las{{ item[0].as|default(AS1) }}_v{{ item[1] }} -n2 AS{{ item[0].as|default(AS1) }}
          register: peer_prefixes
          with_nested:
            - "{{ bgp.neighbors }}"
            - ["4", "6"]
          tags: prefixes

      delegate_to: localhost

    - debug: var=peer_ips.results[0]
    - debug: var=peer_prefixes.results

    - name: Check that peering details were found for AS1={{AS1}} and AS2={{AS2}} at IXP_SITE='{{IXP_SITE}}'
      ansible.builtin.assert:
        that:
          - node_ips.json.data | length > 0
        msg: "Peering details not found for AS1={{AS1}} and AS2={{AS2}} at IXP_SITE='{{IXP_SITE}}'"

    - block:
        - name: Provision node peering IPs using the Ansible collection
          vars:
            n: "{{ node_ips.json.data[0] }}" # Pick only first IP pair
            updates: |
              {%- for v,ip in [('4',n.ipaddr4),('6',n.ipaddr6)] -%}
              {% if ip %}
              - path: /interface[name=ethernet-1/1]/subinterface[index=0]
                value:
                 description: "Provisioned through Ansible"
                 ipv{{v}}:
                  admin-state: "enable"
                  address:
                  - ip-prefix: "{{ ip }}/{{ 22 if v=='4' else 64 }}"
                    primary: [null] # BGP peering only on primary IP
              {% endif %}
              {%- endfor -%}
          nokia.srlinux.config:
            update: "{{ updates | from_yaml }}"
          register: set_ip_response

        - name: Provision BGP prefix list per AS using the Ansible collection
          nokia.srlinux.cli:
            commands: "{{ ['enter candidate'] + item.stdout_lines + ['commit now'] }}"
          register: set_response
          with_items: "{{ peer_prefixes.results }}"
          tags: prefixes

        - name: Provision BGP peers using the Ansible collection
          vars:
            peer: "{{ item[1] }}"
            updates: |
              {% for ip in (peer.ipaddr4,peer.ipaddr6) %}
              {%  if ip %}
              {%   set v = '4' if ip|ansible.utils.ipv4 else '6' %}
              {%   set policy_name = "as" + item[0].item.as|default(AS1)|string + "_v" + v %}
              - path: /routing-policy/policy[name={{ policy_name }}_import]
                value:
                 default-action:
                  policy-result: "reject"
                 statement:
                 - name: "Accept IRR validated prefixes"
                   match:
                    prefix-set: "{{ policy_name }}"
                   action:
                    policy-result: "accept"
              - path: /network-instance[name=default]/protocols/bgp/group[group-name=ebgp_v{{v}}]
                value:
                 afi-safi:
                 - afi-safi-name: ipv4-unicast
                   admin-state: "{{ 'enable' if v=='4' else 'disable' }}"
                 - afi-safi-name: ipv6-unicast
                   admin-state: "{{ 'enable' if v=='6' else 'disable' }}"
              - path: /network-instance[name=default]/protocols/bgp/neighbor[peer-address={{ip}}]
                value:
                 peer-as: "{{ peer.asn }}"
                 peer-group: "ebgp_v{{v}}"
                 import-policy: "{{ policy_name }}_import"
                 description: "Provisioned through Ansible"
              {%  endif %}
              {% endfor %}
              - path: /network-instance[name=default]/protocols/bgp
                value:
                  autonomous-system: "{{ AS2 }}"
          nokia.srlinux.config:
            update: "{{ updates | from_yaml }}"
          register: set_response
          with_subelements:
            - "{{ peer_ips.results }}"
            - json.data

      vars:
        ansible_connection: ansible.netcommon.httpapi
        ansible_network_os: nokia.srlinux.srlinux
        ansible_httpapi_ciphers: ECDHE-RSA-AES256-SHA
